// 智能指针，最简单的是box，其类型是Box<T>。Box允许你将值放在堆上而不是栈上。
// 留在栈上的是指向堆数据的指针。多用于：
// 1. 编译时未知大小的类型，而又想要在需要确切大小的上下文中使用这个类型值的时候
// 2. 有大量数据并希望在确保数据不被拷贝的情况下转移所有权的时候
// 3. 希望拥有一个值并只关心它的类型是否实现了特定trait而不是其具体类型的时候


fn main() {
    let b = Box::new(5); //被分配在堆上值是5的Box
    //可以像数据是储存在栈上那样访问。离开作用域将被释放，释放将作用于box本身和它所指向的堆上的数据
    println!("b = {}", b);



    //Box允许创建递归类型
    //Rust需要在编译期知道类型占用多少空间。递归类型无法知道大小，所以Rust不知道递归类型需要多少空间。
    //这种情况下可以在递归类型定义中插入Box，因为Box的大小是已知的。
    let _list = Cons(1, Box::new(Cons(2,
                                     Box::new(Cons(3,
                                                   Box::new(Nil))))));
    //println!(list);
    //Box<T>类型是一个智能指针，它实现了Deref trait，它允许Box<T>值被当作引用对待。
    //当Box<T>值离开作用域时，由于Box<T>实现了Drop trait，box所指向的堆数据也会被清除
    //Box只提供了间接存储和堆分配功能
}


enum List{
    Cons(i32, Box<List>),
    Nil,
}
use crate::List::{Cons, Nil};

